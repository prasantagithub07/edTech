{"ast":null,"code":"import { DOCUMENT } from '@angular/common';\nimport { forkJoin, ReplaySubject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nexport class UtilService {\n  constructor() {}\n\n  Encrypt(data) {\n    let json = JSON.stringify(data);\n    return CryptoJs.AES.encrypt(json, environment.encKey);\n  }\n\n  Decrypt(encData) {\n    var bytes = CryptoJs.AES.decrypt(encData.toString(), environment.encKey);\n    var data = bytes.toString(CryptoJs.enc.Utf8);\n    return JSON.parse(data);\n  }\n\n  static GenerateGUID() {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      var r = Math.random() * 16 | 0,\n          v = c == 'x' ? r : r & 0x3 | 0x8;\n      return v.toString(16);\n    });\n  }\n\n}\n\nUtilService.ɵfac = function UtilService_Factory(t) {\n  return new (t || UtilService)();\n};\n\nUtilService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UtilService,\n  factory: UtilService.ɵfac,\n  providedIn: 'root'\n});\n/**Handled loading the external library ondemand into our app*/\n\nexport class ExternalLibraryService {\n  constructor(document) {\n    this.document = document;\n    this._loadedLibraries = {};\n  } // forkjoin parameters will grow when we are adding any new external library into app\n\n\n  lazyLoadLibrary(resourseURL) {\n    return forkJoin([this.loadScript(resourseURL)]);\n  }\n\n  loadScript(url) {\n    if (this._loadedLibraries[url]) {\n      return this._loadedLibraries[url].asObservable();\n    }\n\n    this._loadedLibraries[url] = new ReplaySubject();\n    const script = this.document.createElement('script');\n    script.type = 'text/javascript';\n    script.async = true;\n    script.src = url;\n\n    script.onload = () => {\n      this._loadedLibraries[url].next(0);\n\n      this._loadedLibraries[url].complete();\n    };\n\n    this.document.body.appendChild(script);\n    return this._loadedLibraries[url].asObservable();\n  }\n\n}\n\nExternalLibraryService.ɵfac = function ExternalLibraryService_Factory(t) {\n  return new (t || ExternalLibraryService)(i0.ɵɵinject(DOCUMENT));\n};\n\nExternalLibraryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ExternalLibraryService,\n  factory: ExternalLibraryService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["F:/work/edTech_Practice/edTech/edTech.Web/ClientApp/src/app/services/util.service.ts"],"names":["DOCUMENT","forkJoin","ReplaySubject","environment","i0","UtilService","constructor","Encrypt","data","json","JSON","stringify","CryptoJs","AES","encrypt","encKey","Decrypt","encData","bytes","decrypt","toString","enc","Utf8","parse","GenerateGUID","replace","c","r","Math","random","v","ɵfac","UtilService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ExternalLibraryService","document","_loadedLibraries","lazyLoadLibrary","resourseURL","loadScript","url","asObservable","script","createElement","type","async","src","onload","next","complete","body","appendChild","ExternalLibraryService_Factory","ɵɵinject"],"mappings":"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","sourcesContent":["import { DOCUMENT } from '@angular/common';\r\nimport { forkJoin, ReplaySubject } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport * as i0 from \"@angular/core\";\r\nexport class UtilService {\r\n    constructor() { }\r\n    Encrypt(data) {\r\n        let json = JSON.stringify(data);\r\n        return CryptoJs.AES.encrypt(json, environment.encKey);\r\n    }\r\n    Decrypt(encData) {\r\n        var bytes = CryptoJs.AES.decrypt(encData.toString(), environment.encKey);\r\n        var data = bytes.toString(CryptoJs.enc.Utf8);\r\n        return JSON.parse(data);\r\n    }\r\n    static GenerateGUID() {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    }\r\n}\r\nUtilService.ɵfac = function UtilService_Factory(t) { return new (t || UtilService)(); };\r\nUtilService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: UtilService, factory: UtilService.ɵfac, providedIn: 'root' });\r\n/**Handled loading the external library ondemand into our app*/\r\nexport class ExternalLibraryService {\r\n    constructor(document) {\r\n        this.document = document;\r\n        this._loadedLibraries = {};\r\n    }\r\n    // forkjoin parameters will grow when we are adding any new external library into app\r\n    lazyLoadLibrary(resourseURL) {\r\n        return forkJoin([\r\n            this.loadScript(resourseURL)\r\n        ]);\r\n    }\r\n    loadScript(url) {\r\n        if (this._loadedLibraries[url]) {\r\n            return this._loadedLibraries[url].asObservable();\r\n        }\r\n        this._loadedLibraries[url] = new ReplaySubject();\r\n        const script = this.document.createElement('script');\r\n        script.type = 'text/javascript';\r\n        script.async = true;\r\n        script.src = url;\r\n        script.onload = () => {\r\n            this._loadedLibraries[url].next(0);\r\n            this._loadedLibraries[url].complete();\r\n        };\r\n        this.document.body.appendChild(script);\r\n        return this._loadedLibraries[url].asObservable();\r\n    }\r\n}\r\nExternalLibraryService.ɵfac = function ExternalLibraryService_Factory(t) { return new (t || ExternalLibraryService)(i0.ɵɵinject(DOCUMENT)); };\r\nExternalLibraryService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ExternalLibraryService, factory: ExternalLibraryService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}